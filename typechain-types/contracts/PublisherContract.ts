/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PublisherContract {
  export type RequestStruct = {
    requester: AddressLike;
    message: string;
    payment: BigNumberish;
    createdAt: BigNumberish;
  };

  export type RequestStructOutput = [
    requester: string,
    message: string,
    payment: bigint,
    createdAt: bigint
  ] & {
    requester: string;
    message: string;
    payment: bigint;
    createdAt: bigint;
  };

  export type MetadataStruct = {
    handle: string;
    post: string;
    creatorName: string;
    creatorDescription: string;
    initialMediaUrls: string;
    creatorAddress: AddressLike;
    requests: PublisherContract.RequestStruct[];
    active: boolean;
    createdAt: BigNumberish;
    isValue: boolean;
    requestCount: BigNumberish;
    lastRequest: PublisherContract.RequestStruct;
  };

  export type MetadataStructOutput = [
    handle: string,
    post: string,
    creatorName: string,
    creatorDescription: string,
    initialMediaUrls: string,
    creatorAddress: string,
    requests: PublisherContract.RequestStructOutput[],
    active: boolean,
    createdAt: bigint,
    isValue: boolean,
    requestCount: bigint,
    lastRequest: PublisherContract.RequestStructOutput
  ] & {
    handle: string;
    post: string;
    creatorName: string;
    creatorDescription: string;
    initialMediaUrls: string;
    creatorAddress: string;
    requests: PublisherContract.RequestStructOutput[];
    active: boolean;
    createdAt: bigint;
    isValue: boolean;
    requestCount: bigint;
    lastRequest: PublisherContract.RequestStructOutput;
  };
}

export interface PublisherContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getContractOwner"
      | "getMetadataForHandle"
      | "getMetadataUnchecked"
      | "makeRequest"
      | "makeUpload"
      | "network"
      | "registerHandle"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "HandleCreated" | "MediaRequest" | "MediaUploaded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getContractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataForHandle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataUnchecked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeRequest",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeUpload",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "network", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerHandle",
    values: [string, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getContractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataForHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataUnchecked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeUpload", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "network", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerHandle",
    data: BytesLike
  ): Result;
}

export namespace HandleCreatedEvent {
  export type InputTuple = [handle: string];
  export type OutputTuple = [handle: string];
  export interface OutputObject {
    handle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MediaRequestEvent {
  export type InputTuple = [
    requester: AddressLike,
    name: string,
    message: string,
    payment: BigNumberish
  ];
  export type OutputTuple = [
    requester: string,
    name: string,
    message: string,
    payment: bigint
  ];
  export interface OutputObject {
    requester: string;
    name: string;
    message: string;
    payment: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MediaUploadedEvent {
  export type InputTuple = [
    verifier: AddressLike,
    Media: string,
    description: string
  ];
  export type OutputTuple = [
    verifier: string,
    Media: string,
    description: string
  ];
  export interface OutputObject {
    verifier: string;
    Media: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PublisherContract extends BaseContract {
  connect(runner?: ContractRunner | null): PublisherContract;
  waitForDeployment(): Promise<this>;

  interface: PublisherContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getContractOwner: TypedContractMethod<[], [string], "view">;

  getMetadataForHandle: TypedContractMethod<
    [_handle: string],
    [PublisherContract.MetadataStructOutput],
    "view"
  >;

  getMetadataUnchecked: TypedContractMethod<
    [_handle: string],
    [PublisherContract.MetadataStructOutput],
    "view"
  >;

  makeRequest: TypedContractMethod<
    [_handle: string, _message: string],
    [void],
    "payable"
  >;

  makeUpload: TypedContractMethod<
    [_handle: string, _contentId: string, _description: string],
    [PublisherContract.MetadataStructOutput],
    "nonpayable"
  >;

  network: TypedContractMethod<[], [string], "view">;

  registerHandle: TypedContractMethod<
    [
      _handle: string,
      _creatorName: string,
      _creatorDescription: string,
      _initialMediaUrls: string
    ],
    [PublisherContract.MetadataStructOutput],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getContractOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMetadataForHandle"
  ): TypedContractMethod<
    [_handle: string],
    [PublisherContract.MetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMetadataUnchecked"
  ): TypedContractMethod<
    [_handle: string],
    [PublisherContract.MetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "makeRequest"
  ): TypedContractMethod<
    [_handle: string, _message: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "makeUpload"
  ): TypedContractMethod<
    [_handle: string, _contentId: string, _description: string],
    [PublisherContract.MetadataStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "network"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerHandle"
  ): TypedContractMethod<
    [
      _handle: string,
      _creatorName: string,
      _creatorDescription: string,
      _initialMediaUrls: string
    ],
    [PublisherContract.MetadataStructOutput],
    "nonpayable"
  >;

  getEvent(
    key: "HandleCreated"
  ): TypedContractEvent<
    HandleCreatedEvent.InputTuple,
    HandleCreatedEvent.OutputTuple,
    HandleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MediaRequest"
  ): TypedContractEvent<
    MediaRequestEvent.InputTuple,
    MediaRequestEvent.OutputTuple,
    MediaRequestEvent.OutputObject
  >;
  getEvent(
    key: "MediaUploaded"
  ): TypedContractEvent<
    MediaUploadedEvent.InputTuple,
    MediaUploadedEvent.OutputTuple,
    MediaUploadedEvent.OutputObject
  >;

  filters: {
    "HandleCreated(string)": TypedContractEvent<
      HandleCreatedEvent.InputTuple,
      HandleCreatedEvent.OutputTuple,
      HandleCreatedEvent.OutputObject
    >;
    HandleCreated: TypedContractEvent<
      HandleCreatedEvent.InputTuple,
      HandleCreatedEvent.OutputTuple,
      HandleCreatedEvent.OutputObject
    >;

    "MediaRequest(address,string,string,uint256)": TypedContractEvent<
      MediaRequestEvent.InputTuple,
      MediaRequestEvent.OutputTuple,
      MediaRequestEvent.OutputObject
    >;
    MediaRequest: TypedContractEvent<
      MediaRequestEvent.InputTuple,
      MediaRequestEvent.OutputTuple,
      MediaRequestEvent.OutputObject
    >;

    "MediaUploaded(address,string,string)": TypedContractEvent<
      MediaUploadedEvent.InputTuple,
      MediaUploadedEvent.OutputTuple,
      MediaUploadedEvent.OutputObject
    >;
    MediaUploaded: TypedContractEvent<
      MediaUploadedEvent.InputTuple,
      MediaUploadedEvent.OutputTuple,
      MediaUploadedEvent.OutputObject
    >;
  };
}
